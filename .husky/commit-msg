#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# プロジェクトのルートディレクトリに移動
cd "$(git rev-parse --show-toplevel)"

# コミットメッセージの形式を検証
commit_msg_file=$1
commit_msg=$(cat $commit_msg_file)

# package.jsonでコミットメッセージ関連のスクリプトをチェック
has_commitlint=false
has_custom_script=false

if grep -q "\"@commitlint/cli\"" package.json || grep -q "\"commitlint\"" package.json; then
  has_commitlint=true
fi

if grep -q "\"create-commit-msg\"" package.json; then
  has_custom_script=true
fi

# 使用可能なツールがある場合はそれを使用
if [ "$has_commitlint" = true ]; then
  echo "🔍 commitlintを使用してメッセージを検証中..."
  pnpm commitlint --edit $commit_msg_file
  result=$?
  if [ $result -ne 0 ]; then
    exit 1
  fi
elif [ "$has_custom_script" = true ]; then
  echo "🔍 カスタムスクリプトを使用してメッセージを検証中..."
  pnpm create-commit-msg $commit_msg_file
  result=$?
  if [ $result -ne 0 ]; then
    exit 1
  fi
else
  # 標準の検証ロジック
  echo "🔍 コミットメッセージを検証中..."

  # 1. コミットタイプの検証
  # 例: feat: 新機能追加, fix: バグ修正, etc.
  if ! echo "$commit_msg" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert)(\(.+\))?:"; then
    echo "❌ コミットメッセージのフォーマットが正しくありません。"
    echo "以下のプレフィックスを使用してください:"
    echo "feat: 新機能"
    echo "fix: バグ修正"
    echo "docs: ドキュメントのみの変更"
    echo "style: コードの意味に影響しない変更（スペース、フォーマット、セミコロンなど）"
    echo "refactor: バグ修正や機能追加ではないコード変更"
    echo "perf: パフォーマンス向上のためのコード変更"
    echo "test: テストの追加・修正"
    echo "chore: ビルドプロセスやツールの変更"
    echo "build: ビルドシステムや外部依存関係に関する変更"
    echo "ci: CI設定ファイルやスクリプトの変更"
    echo "revert: 以前のコミットを取り消す"
    echo ""
    echo "例: feat: ユーザー認証機能の追加"
    exit 1
  fi

  # 2. メッセージの長さをチェック
  if [ ${#commit_msg} -lt 10 ]; then
    echo "❌ コミットメッセージが短すぎます。具体的に変更内容を説明してください。"
    exit 1
  fi

  # 3. 本文があるか確認（オプション）
  if [ $(echo "$commit_msg" | wc -l) -lt 2 ] && [ ${#commit_msg} -lt 50 ]; then
    echo "⚠️ 推奨: 複雑な変更には詳細な説明を追加してください。"
  fi

  # 4. 絵文字のサポート（オプション）
  emoji_pattern=':([a-z_]+):'
  if [[ "$commit_msg" =~ $emoji_pattern ]]; then
    echo "ℹ️ 絵文字が検出されました: ${BASH_REMATCH[1]}"
  fi

  # 5. チケット番号の形式チェック（プロジェクト固有、オプション）
  ticket_pattern='#([0-9]+)'
  if [[ "$commit_msg" =~ $ticket_pattern ]]; then
    echo "ℹ️ チケット番号が検出されました: #${BASH_REMATCH[1]}"
  elif grep -q "issue" package.json && ! echo "$commit_msg" | grep -qE "#[0-9]+"; then
    echo "⚠️ 推奨: チケット番号を含めると変更の追跡が容易になります (例: #123)"
  fi
fi

echo "✅ コミットメッセージの形式が正しいです。"