name: 再利用可能テスト結果処理

# 様々なテスト結果処理を一元化した再利用可能ワークフロー
# このワークフローはテスト実行結果（JUnitレポート）とカバレッジレポートを
# GitHub Actionsのアーティファクトとして保存し、必要に応じてPRにコメントします
on:
  workflow_call:
    inputs:
      test_type:
        description: 'テストタイプ (unit, integration, e2e, component など)'
        required: true
        type: string
      artifact_name:
        description: 'アーティファクト名（指定しない場合は test_type + -results）'
        required: false
        type: string
      junit_path:
        description: 'JUnitレポートのパス'
        required: false
        default: 'junit.xml'
        type: string
      coverage_path:
        description: 'カバレッジレポートのディレクトリパス'
        required: false
        default: 'coverage'
        type: string
      retention_days:
        description: 'アーティファクト保持日数'
        required: false
        default: '7'
        type: number
      comment_on_pr:
        description: 'PRにコメントするかどうか'
        required: false
        default: false
        type: boolean
      fail_on_empty:
        description: 'ファイルが存在しない場合に失敗するか'
        required: false
        default: false
        type: boolean

jobs:
  process-test-results:
    name: テスト結果処理
    runs-on: ubuntu-latest
    steps:
      # JUnitレポートの処理：テスト結果XMLファイルを標準化して保存
      - name: テスト結果ディレクトリの準備
        if: inputs.junit_path != ''
        run: |
          mkdir -p test-results/${{ inputs.test_type }}
          # JUnitファイルの存在確認と必要に応じて空ファイル作成
          if [ ! -f "${{ inputs.junit_path }}" ]; then
            if [ "${{ inputs.fail_on_empty }}" == "true" ]; then
              echo "エラー: JUnitレポートファイルが存在しません: ${{ inputs.junit_path }}"
              exit 1
            else
              echo "警告: JUnitレポートファイルが存在しないため空ファイルを作成します"
              # 最小限の有効なJUnitXMLを作成
              echo "<testsuites><testsuite name='${{ inputs.test_type }}' errors='0' failures='0' skipped='0' tests='0'></testsuite></testsuites>" > "${{ inputs.junit_path }}"
            fi
          fi
          cp ${{ inputs.junit_path }} test-results/${{ inputs.test_type }}/junit.xml || echo "JUnitレポートのコピーに失敗しました"

      # テスト結果をGitHub Actionsのアーティファクトとして保存
      - name: テスト結果のアップロード
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact_name || format('{0}-results', inputs.test_type) }}
          path: test-results/${{ inputs.test_type }}/
          retention-days: ${{ inputs.retention_days }}
          if-no-files-found: warn

      # カバレッジレポートの処理：カバレッジデータディレクトリの確認と必要に応じて作成
      - name: カバレッジレポートの準備
        if: inputs.coverage_path != ''
        run: |
          if [ ! -d "${{ inputs.coverage_path }}" ]; then
            if [ "${{ inputs.fail_on_empty }}" == "true" ]; then
              echo "エラー: カバレッジディレクトリが存在しません: ${{ inputs.coverage_path }}"
              exit 1
            else
              echo "警告: カバレッジディレクトリが存在しないため空のディレクトリとファイルを作成します"
              # カバレッジレポート用の最小限のディレクトリ構造とファイルを作成
              mkdir -p ${{ inputs.coverage_path }}/lcov-report
              echo '{"total":{"lines":{"total":0,"covered":0,"skipped":0,"pct":0}}}' > ${{ inputs.coverage_path }}/coverage-summary.json
              echo "<html><body><h1>カバレッジレポートは生成されていません</h1></body></html>" > ${{ inputs.coverage_path }}/lcov-report/index.html
            fi
          fi

      # カバレッジレポートをGitHub Actionsのアーティファクトとして保存
      - name: カバレッジレポートのアップロード
        if: inputs.coverage_path != ''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ format('{0}-coverage', inputs.test_type) }}
          path: ${{ inputs.coverage_path }}/
          retention-days: ${{ inputs.retention_days }}
          if-no-files-found: warn

      # カバレッジレポートのチェック
      - name: カバレッジ状態の設定
        id: coverage_check
        run: |
          if [ "${{ inputs.coverage_path }}" != "" ] && [ -d "${{ inputs.coverage_path }}" ]; then
            echo "has_coverage=true" >> $GITHUB_OUTPUT
          else
            echo "has_coverage=false" >> $GITHUB_OUTPUT
          fi

      # PR時のみコメントを追加（オプション）：テスト結果とカバレッジ情報をPRにフィードバック
      - name: PRへのテスト結果コメント
        if: inputs.comment_on_pr && github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          message: |
            ## ${{ inputs.test_type }} テスト結果

            以下のテスト結果とアーティファクトを確認してください：

            - [テスト結果アーティファクト](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})
            ${{ steps.coverage_check.outputs.has_coverage == 'true' && '- [カバレッジレポート](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})' || '' }}
