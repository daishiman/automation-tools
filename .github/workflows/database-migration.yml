name: データベースマイグレーション

# データベーススキーマの変更を適用するワークフロー
# 以下の場合に実行されます:
# 1. 手動実行時（ワークフロー・ディスパッチ）- 環境を選択可能
# 2. マイグレーションファイルが変更された場合の自動実行
on:
  workflow_dispatch:
    inputs:
      environment:
        description: '適用環境（development/production）'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production
  push:
    branches: [develop, main]
    paths:
      - 'db/migrations/**'
      - '!**.md'
      - '!docs/**'
      - '!rules/**'

jobs:
  migrate:
    name: マイグレーション実行
    runs-on: ubuntu-latest
    # 指定された環境に基づいて実行環境を設定
    # 手動実行時は選択された環境、自動実行時はブランチに基づいて環境を決定
    # main => production, develop => development
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'development') }}

    steps:
      # 基本的な環境セットアップステップ
      # リポジトリのコードを取得し、Node.jsとPNPM環境を準備
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v4

      - name: PNPMのセットアップ
        uses: pnpm/action-setup@v2
        with:
          version: 8.10.0

      - name: Node.jsのセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 依存関係のインストール
        run: pnpm install

      # 環境変数の設定
      - name: 環境変数の設定
        id: env_setup
        run: |
          echo "現在の環境: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'development') }}"

          if [[ "${{ github.event.inputs.environment }}" == "production" || "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENV_SUFFIX=prod" >> $GITHUB_ENV
            echo "ENV_NAME=production" >> $GITHUB_ENV
          else
            echo "ENV_SUFFIX=preview" >> $GITHUB_ENV
            echo "ENV_NAME=development" >> $GITHUB_ENV
          fi

      # マイグレーション前のバックアップステップ
      # マイグレーション適用前にデータベースのバックアップを作成
      # エラー発生時の復旧に使用可能
      # Cloudflare D1データベースをR2バケットにバックアップ
      - name: データベースバックアップ
        run: pnpm db:backup
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          D1_DATABASE_NAME: ${{ vars.D1_DATABASE_NAME }}
          D1_DATABASE_ID: ${{ secrets.D1_DATABASE_ID }}
          R2_BACKUPS_BUCKET_NAME: ${{ vars.R2_BACKUPS_BUCKET_NAME }}

      # マイグレーション実行ステップ
      # データベーススキーマの変更を適用
      # Cloudflare D1データベースに対してマイグレーションを実行
      - name: マイグレーション適用
        run: |
          echo "データベースマイグレーションを実行しています..."

          # 環境変数の確認
          echo "環境変数とワークスペース情報:"
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "環境名: ${{ github.event.inputs.environment }}"

          # 環境設定
          if [[ "${{ github.event.inputs.environment }}" == "development" || "${{ github.event.inputs.environment }}" == "preview" ]]; then
            ENV="preview"
            D1_DB_NAME="automationa-tools-dev-db"
            echo "マイグレーション実行環境: 開発/プレビュー環境"
          elif [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            ENV="production"
            D1_DB_NAME="automationa-tools-db"
            echo "マイグレーション実行環境: 本番環境"
          else
            ENV="preview"
            D1_DB_NAME="automationa-tools-dev-db"
            echo "未指定のため、デフォルトでプレビュー環境を使用します"
          fi

          echo "使用するデータベース名: ${D1_DB_NAME}"

          # ディレクトリ構造確認
          echo "作業ディレクトリの内容:"
          ls -la
          echo "マイグレーションディレクトリ:"
          ls -la migrations || echo "マイグレーションディレクトリがありません"

          # wrangler.tomlが存在するか確認
          if [ ! -f "wrangler.toml" ]; then
            echo "警告: wrangler.tomlが見つかりません。"
          else
            echo "wrangler.toml確認済み"
          fi

          # wrangler.tomlの内容確認（データベース設定部分）
          echo "wrangler.toml内のデータベース設定確認:"
          grep -v -e "apiToken" -e "password" -e "secret" wrangler.toml | grep -A 5 "d1_databases" | cat || echo "構成ファイルの表示に失敗しました"

          # テーブル情報確認
          echo "データベーステーブル一覧を確認しています..."
          CLOUDFLARE_API_TOKEN=${{ secrets.CF_API_TOKEN }} \
          CLOUDFLARE_ACCOUNT_ID=${{ secrets.CF_ACCOUNT_ID }} \
          pnpm exec wrangler d1 execute "${D1_DB_NAME}" \
            --command="SELECT name FROM sqlite_master WHERE type='table'" \
            --env=$ENV || echo "テーブル一覧の取得に失敗しましたが続行します"

          # マイグレーションファイルの状態確認
          echo "マイグレーションファイルの状態を確認しています..."
          CLOUDFLARE_API_TOKEN=${{ secrets.CF_API_TOKEN }} \
          CLOUDFLARE_ACCOUNT_ID=${{ secrets.CF_ACCOUNT_ID }} \
          pnpm exec wrangler d1 migrations list "${D1_DB_NAME}" \
            --env=$ENV || echo "マイグレーション一覧の取得に失敗しましたが続行します"

          # マイグレーション実行（--debugフラグを削除）
          echo "マイグレーションを適用しています..."
          echo "使用データベース名: ${D1_DB_NAME}, 環境: ${ENV}"
          CLOUDFLARE_API_TOKEN=${{ secrets.CF_API_TOKEN }} \
          CLOUDFLARE_ACCOUNT_ID=${{ secrets.CF_ACCOUNT_ID }} \
          pnpm exec wrangler d1 migrations apply "${D1_DB_NAME}" \
            --env=$ENV || echo "マイグレーション適用に失敗しました"

          # 成功時のメッセージ
          echo "====================================="
          echo "マイグレーションプロセスが完了しました"
          echo "環境: $ENV"
          echo "データベース: ${D1_DB_NAME}"
          echo "====================================="
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          D1_DATABASE_ID: ${{ secrets.D1_DATABASE_ID }}

      # KVストア初期化（必要に応じて）
      - name: KVストア初期化
        run: |
          echo "KVストアを初期化しています（${{ env.ENV_NAME }}環境）..."

          # アプリバージョンをKVに保存
          if [[ "${{ env.ENV_NAME }}" == "production" ]]; then
            # 本番環境KV初期化 - アプリバージョン
            pnpm kv:prod:put APP_VERSION "$(node -p "require('./package.json').version")" || echo "KV初期化スキップ"

            # キャッシュKVの初期化
            echo "本番環境キャッシュKVの初期化中..."
            pnpm exec wrangler kv namespace list --json | grep "${{ vars.KV_CACHE_BINDING }}" || echo "キャッシュKV確認スキップ"

            # セッションストアKVの初期化
            echo "本番環境セッションストアKVの初期化中..."
            pnpm exec wrangler kv namespace list --json | grep "${{ vars.KV_SESSION_STORE_BINDING }}" || echo "セッションストアKV確認スキップ"

            # マイグレーション情報を記録
            pnpm kv:prod:put DB_LAST_MIGRATED "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          else
            # 開発環境KV初期化 - アプリバージョン
            pnpm kv:dev:put APP_VERSION "$(node -p "require('./package.json').version")" || echo "KV初期化スキップ"

            # キャッシュKVの初期化
            echo "開発環境キャッシュKVの初期化中..."
            pnpm exec wrangler kv namespace list --json | grep "${{ vars.KV_CACHE_BINDING }}" || echo "キャッシュKV確認スキップ"

            # セッションストアKVの初期化
            echo "開発環境セッションストアKVの初期化中..."
            pnpm exec wrangler kv namespace list --json | grep "${{ vars.KV_SESSION_STORE_BINDING }}" || echo "セッションストアKV確認スキップ"

            # マイグレーション情報を記録
            pnpm kv:dev:put DB_LAST_MIGRATED "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          fi
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          KV_CACHE_ID: ${{ secrets.KV_CACHE_ID }}
          KV_SESSION_STORE_ID: ${{ secrets.KV_SESSION_STORE_ID }}

      # R2バケット確認
      - name: R2バケット確認
        run: |
          echo "R2バケットを確認しています（${{ env.ENV_NAME }}環境）..."

          if [[ "${{ env.ENV_NAME }}" == "production" ]]; then
            # 本番環境R2バケット確認
            echo "本番環境アセットバケット確認中..."
            # EPIPEエラー対策のためファイルにリダイレクト
            pnpm exec wrangler r2 bucket list > /tmp/r2-buckets.txt || echo "R2バケット一覧取得失敗"
            cat /tmp/r2-buckets.txt | grep "${{ vars.R2_ASSETS_BUCKET_NAME }}" || echo "アセットバケット未確認"

            # バックアップバケット確認
            echo "本番環境バックアップバケット確認中..."
            cat /tmp/r2-buckets.txt | grep "${{ vars.R2_BACKUPS_BUCKET_NAME }}" || echo "バックアップバケット未確認"

            # バケット使用状況確認
            echo "本番環境R2バケット使用状況："
            cat /tmp/r2-buckets.txt

            # データベースバックアップの確認（最近のバックアップファイル）
            echo "最新のデータベースバックアップ確認："
            pnpm exec wrangler r2 object list ${{ vars.R2_BACKUPS_BUCKET_NAME }} --prefix="db-backup-" --max-keys=5 > /tmp/r2-backups.txt || echo "バックアップ一覧取得失敗"
            cat /tmp/r2-backups.txt | sort -r | head -n 5 || echo "バックアップファイル一覧スキップ"

          else
            # 開発環境R2バケット確認
            echo "開発環境アセットバケット確認中..."
            # EPIPEエラー対策のためファイルにリダイレクト
            pnpm exec wrangler r2 bucket list > /tmp/r2-buckets.txt || echo "R2バケット一覧取得失敗"
            cat /tmp/r2-buckets.txt | grep "${{ vars.R2_ASSETS_BUCKET_NAME }}" || echo "アセットバケット未確認"

            # バックアップバケット確認
            echo "開発環境バックアップバケット確認中..."
            cat /tmp/r2-buckets.txt | grep "${{ vars.R2_BACKUPS_BUCKET_NAME }}" || echo "バックアップバケット未確認"

            # バケット使用状況確認
            echo "開発環境R2バケット使用状況："
            cat /tmp/r2-buckets.txt

            # データベースバックアップの確認（最近のバックアップファイル）
            echo "最新のデータベースバックアップ確認："
            pnpm exec wrangler r2 object list ${{ vars.R2_BACKUPS_BUCKET_NAME }} --prefix="db-backup-" --max-keys=5 > /tmp/r2-backups.txt || echo "バックアップ一覧取得失敗"
            cat /tmp/r2-backups.txt | sort -r | head -n 5 || echo "バックアップファイル一覧スキップ"
          fi
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          R2_ASSETS_BUCKET_NAME: ${{ vars.R2_ASSETS_BUCKET_NAME }}
          R2_BACKUPS_BUCKET_NAME: ${{ vars.R2_BACKUPS_BUCKET_NAME }}

      # 結果通知ステップ
      # マイグレーションの成功・失敗をSlackに通知
      # 成功の場合は緑色、失敗の場合は赤色で通知
      # 常に実行されるため、エラー発生時も通知が行われる
      - name: マイグレーション結果通知
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK || '' }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
          SLACK_TITLE: データベースマイグレーション ${{ job.status == 'success' && '✅ 成功' || '❌ 失敗' }}
          SLACK_MESSAGE: |
            環境: ${{ env.ENV_NAME }}
            データベース: ${{ vars.D1_DATABASE_NAME }}
            ステータス: ${{ job.status }}
