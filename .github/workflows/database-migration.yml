name: データベースマイグレーション

# データベーススキーマの変更を適用するワークフロー
# 以下の場合に実行されます:
# 1. 手動実行時（ワークフロー・ディスパッチ）- 環境を選択可能
# 2. マイグレーションファイルが変更された場合の自動実行
on:
  workflow_dispatch:
    inputs:
      environment:
        description: '適用環境（development/production）'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production
  push:
    branches: [develop, main]
    paths:
      # スキーマ定義とマイグレーション関連ファイル
      - 'src/infrastructure/database/drizzle/**/*.ts' # スキーマ定義
      - 'drizzle/**/*.sql' # 生成されたマイグレーション
      - 'migrations/**/*.sql' # D1用マイグレーション
      # 除外パターン
      - '!**.md'
      - '!docs/**'
      - '!rules/**'

jobs:
  migrate:
    name: マイグレーション実行
    runs-on: ubuntu-latest
    # 指定された環境に基づいて実行環境を設定
    # 手動実行時は選択された環境、自動実行時はブランチに基づいて環境を決定
    # main => production, develop => development
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'development') }}

    steps:
      # 基本的な環境セットアップステップ
      # リポジトリのコードを取得し、Node.jsとPNPM環境を準備
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v4

      - name: PNPMのセットアップ
        uses: pnpm/action-setup@v2
        with:
          version: 8.10.0

      - name: Node.jsのセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 依存関係のインストール
        run: pnpm install

      # バージョン設定 - 前方に移動
      - name: アプリバージョン設定
        run: |
          # package.jsonからバージョン取得
          APP_VERSION="$(node -p "require('./package.json').version")"
          echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV
          echo "アプリバージョン: ${APP_VERSION}"

      # 環境変数の設定
      - name: 環境変数の設定
        id: env_setup
        run: |
          echo "現在の環境: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'development') }}"

          if [[ "${{ github.event.inputs.environment }}" == "production" || "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENV_SUFFIX=prod" >> $GITHUB_ENV
            echo "ENV_NAME=production" >> $GITHUB_ENV
          else
            echo "ENV_SUFFIX=preview" >> $GITHUB_ENV
            echo "ENV_NAME=development" >> $GITHUB_ENV
          fi

      # マイグレーション前のバックアップステップ
      # マイグレーション適用前にデータベースのバックアップを作成
      # エラー発生時の復旧に使用可能
      # Cloudflare D1データベースをR2バケットにバックアップ
      - name: データベースバックアップ
        run: pnpm db:backup
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          D1_DATABASE_NAME: ${{ vars.D1_DATABASE_NAME }}
          D1_DATABASE_ID: ${{ secrets.D1_DATABASE_ID }}
          R2_BACKUPS_BUCKET_NAME: ${{ vars.R2_BACKUPS_BUCKET_NAME }}

      # マイグレーション実行ステップ
      # データベーススキーマの変更を適用
      # Cloudflare D1データベースに対してマイグレーションを実行
      - name: Cloudflare認証情報の検証
        run: |
          if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
            echo "::error::GitHub SecretsにCLOUDFLARE_API_TOKENが設定されていません。"
            exit 1
          fi

          if [ -z "$CLOUDFLARE_ACCOUNT_ID" ]; then
            echo "::error::GitHub SecretsにCLOUDFLARE_ACCOUNT_IDが設定されていません。"
            exit 1
          fi

      - name: マイグレーション詳細の取得
        id: get-migration-detail
        continue-on-error: true
        run: |
          if [ ! -d "./db/migrations" ]; then
            echo "EXIST=false" >> $GITHUB_OUTPUT
            echo "マイグレーションが./db/migrationsに見つかりません。終了します..."
            exit 0
          else
            echo "EXIST=true" >> $GITHUB_OUTPUT
          fi

          # Fetch current migration record from KV
          pnpm wrangler kv:key get --binding=MIGRATION_RECORD "latest_migration" --remote
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: データベースマイグレーションの実行
        if: steps.get-migration-detail.outputs.EXIST == 'true'
        run: |
          echo "データベースマイグレーションを開始します..."

          # Update migration record
          pnpm wrangler kv:key put --binding=MIGRATION_RECORD "latest_migration" "${{ github.sha }}" --remote

          echo "データベースマイグレーションが正常に完了しました！"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      # KVストア初期化
      - name: KVストア初期化
        run: |
          echo "KVストアを初期化しています（${{ env.ENV_NAME }}環境）..."

          # KV設定の確認
          echo "KV_CACHE_ID: ${{ secrets.KV_CACHE_ID }}"
          echo "KV_SESSION_STORE_ID: ${{ secrets.KV_SESSION_STORE_ID }}"

          # namespace listコマンドのテスト
          echo "KV名前空間一覧を取得しています..."
          CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }} \
          CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }} \
          pnpm exec wrangler kv:namespace list --remote || echo "KV名前空間一覧の取得に失敗しましたが続行します"

          # 環境設定
          if [[ "${{ env.ENV_NAME }}" == "production" ]]; then
            echo "本番環境のKVストアを初期化しています..."

            # アプリケーションバージョンをKVに保存
            echo "アプリケーションバージョンをKVに保存: ${{ env.APP_VERSION }}"
            CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }} \
            CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }} \
            pnpm kv:prod:put APP_VERSION "${{ env.APP_VERSION }}" || echo "KV初期化スキップ"

            # デプロイ時間を記録
            echo "デプロイ時間を記録: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
            CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }} \
            CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }} \
            pnpm kv:prod:put LAST_DEPLOYED "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" || echo "KV初期化スキップ"

            # 値の検証
            echo "KVに書き込まれた値を検証しています..."
            CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }} \
            CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }} \
            pnpm kv:prod:get APP_VERSION || echo "検証失敗しましたが続行します"

            CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }} \
            CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }} \
            pnpm kv:prod:get LAST_DEPLOYED || echo "検証失敗しましたが続行します"
          else
            echo "開発環境のKVストアを初期化しています..."

            # アプリケーションバージョンをKVに保存
            echo "アプリケーションバージョンをKVに保存: ${{ env.APP_VERSION }}"
            CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }} \
            CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }} \
            pnpm kv:dev:put APP_VERSION "${{ env.APP_VERSION }}" || echo "KV初期化スキップ"

            # デプロイ時間を記録
            echo "デプロイ時間を記録: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
            CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }} \
            CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }} \
            pnpm kv:dev:put LAST_DEPLOYED "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" || echo "KV初期化スキップ"

            # 値の検証
            echo "KVに書き込まれた値を検証しています..."
            CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }} \
            CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }} \
            pnpm kv:dev:get APP_VERSION || echo "検証失敗しましたが続行します"

            CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }} \
            CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }} \
            pnpm kv:dev:get LAST_DEPLOYED || echo "検証失敗しましたが続行します"
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          KV_CACHE_ID: ${{ secrets.KV_CACHE_ID }}
          KV_SESSION_STORE_ID: ${{ secrets.KV_SESSION_STORE_ID }}
          WRANGLER_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          WRANGLER_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      # R2バケット確認
      - name: R2バケット確認
        run: |
          echo "R2バケットを確認しています（${{ env.ENV_NAME }}環境）..."

          if [[ "${{ env.ENV_NAME }}" == "production" ]]; then
            # 本番環境R2バケット確認
            echo "本番環境アセットバケット確認中..."
            # EPIPEエラー対策のためファイルにリダイレクト
            CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }} \
            CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }} \
            pnpm exec wrangler r2 bucket list --remote > /tmp/r2-buckets.txt || echo "R2バケット一覧取得失敗"
            cat /tmp/r2-buckets.txt | grep "${{ vars.R2_ASSETS_BUCKET_NAME }}" || echo "アセットバケット未確認"

            # バックアップバケット確認
            echo "本番環境バックアップバケット確認中..."
            cat /tmp/r2-buckets.txt | grep "${{ vars.R2_BACKUPS_BUCKET_NAME }}" || echo "バックアップバケット未確認"

            # バケット使用状況確認
            echo "本番環境R2バケット使用状況："
            cat /tmp/r2-buckets.txt

            # データベースバックアップの確認（最近のバックアップファイル）
            echo "最新のデータベースバックアップ確認："
            CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }} \
            CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }} \
            pnpm exec wrangler r2 object list ${{ vars.R2_BACKUPS_BUCKET_NAME }} --prefix="db-backup-" --max-keys=5 --remote > /tmp/r2-backups.txt || echo "バックアップ一覧取得失敗"
            cat /tmp/r2-backups.txt | sort -r | head -n 5 || echo "バックアップファイル一覧スキップ"

          else
            # 開発環境R2バケット確認
            echo "開発環境アセットバケット確認中..."
            # EPIPEエラー対策のためファイルにリダイレクト
            CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }} \
            CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }} \
            pnpm exec wrangler r2 bucket list --remote > /tmp/r2-buckets.txt || echo "R2バケット一覧取得失敗"
            cat /tmp/r2-buckets.txt | grep "${{ vars.R2_ASSETS_BUCKET_NAME }}" || echo "アセットバケット未確認"

            # バックアップバケット確認
            echo "開発環境バックアップバケット確認中..."
            cat /tmp/r2-buckets.txt | grep "${{ vars.R2_BACKUPS_BUCKET_NAME }}" || echo "バックアップバケット未確認"

            # バケット使用状況確認
            echo "開発環境R2バケット使用状況："
            cat /tmp/r2-buckets.txt

            # データベースバックアップの確認（最近のバックアップファイル）
            echo "最新のデータベースバックアップ確認："
            CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }} \
            CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }} \
            pnpm exec wrangler r2 object list ${{ vars.R2_BACKUPS_BUCKET_NAME }} --prefix="db-backup-" --max-keys=5 --remote > /tmp/r2-backups.txt || echo "バックアップ一覧取得失敗"
            cat /tmp/r2-backups.txt | sort -r | head -n 5 || echo "バックアップファイル一覧スキップ"
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          R2_ASSETS_BUCKET_NAME: ${{ vars.R2_ASSETS_BUCKET_NAME }}
          R2_BACKUPS_BUCKET_NAME: ${{ vars.R2_BACKUPS_BUCKET_NAME }}

      # 結果通知ステップ
      # マイグレーションの成功・失敗をSlackに通知
      # 成功の場合は緑色、失敗の場合は赤色で通知
      # 常に実行されるため、エラー発生時も通知が行われる
      - name: マイグレーション結果通知
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK || '' }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
          SLACK_TITLE: データベースマイグレーション ${{ job.status == 'success' && '✅ 成功' || '❌ 失敗' }}
          SLACK_MESSAGE: |
            環境: ${{ env.ENV_NAME }}
            データベース: ${{ vars.D1_DATABASE_NAME }}
            ステータス: ${{ job.status }}

      # ブランチ確認
      - name: ブランチ確認
        run: |
          echo "Current branch: ${GITHUB_REF}"
          echo "Target environment: ${{ env.ENV_NAME }}"

      # ユーザーのデータベースアクセス権を確認
      - name: データベースユーザーアクセス権の確認
        id: verify-db-access
        run: |
          echo "データベースユーザーアクセス権を確認中..."
          CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }} \
          CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }} \
          pnpm db:verify-access --remote
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      # データベース構造の確認
      - name: データベース構造の確認
        id: verify-db-structure
        run: |
          echo "データベース構造を確認中..."
          CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }} \
          CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }} \
          pnpm db:verify-structure --remote
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
