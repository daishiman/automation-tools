name: 本番環境 CI/CD

# 本番環境向けワークフロー
# 対象: mainブランチへのプッシュ・PR、または手動実行
on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'rules/**'
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'rules/**'
  workflow_dispatch: # 手動実行も可能
    inputs:
      skip_approval:
        description: '承認ステップをスキップしますか？（緊急時のみ）'
        required: false
        default: 'no'
        type: choice
        options:
          - 'yes'
          - 'no'
      deploy_notes:
        description: 'デプロイに関する注記'
        required: false
        type: string

# 実行の最適化（同時実行を防止）
concurrency:
  group: production-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# 必要な権限
permissions:
  contents: read
  deployments: write
  pull-requests: write

jobs:
  # ステップ1: 環境セットアップ（再利用可能ワークフローから呼び出し）
  setup:
    name: 環境セットアップ
    uses: ./.github/workflows/reusable-setup.yml
    with:
      node_version: '20'
      pnpm_version: '8.10.0'
      install_dependencies: true

  # ステップ2: テストと検証
  # プッシュ、PR、手動実行時に必ず実行する
  lint-and-test:
    name: 型チェック・リント・テスト
    needs: [setup]
    runs-on: ubuntu-latest
    steps:
      - name: ソースコードのチェックアウト
        uses: actions/checkout@v4

      - name: PNPMのセットアップ
        uses: pnpm/action-setup@v2
        with:
          version: 8.10.0

      - name: Node.jsのセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 依存関係のインストール
        run: pnpm install

      - name: リント実行
        run: pnpm lint

      - name: 型チェック
        run: pnpm type-check

      - name: ユニットテスト実行
        run: pnpm test

      - name: テストカバレッジチェック
        run: pnpm test:coverage

      # セキュリティチェック
      - name: セキュリティスキャン
        run: |
          # 依存関係の脆弱性スキャン
          pnpm audit || echo "脆弱性が見つかりました。本番デプロイ前に確認してください。"

          # ソースコードの簡易セキュリティチェック
          if grep -r "eval(" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" .; then
            echo "⚠️ evalが使用されています。セキュリティリスクがあります。"
          fi

          if grep -r "innerHTML" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" .; then
            echo "⚠️ innerHTMLが使用されています。XSS脆弱性の可能性があります。"
          fi

  # テスト結果のPRコメント（PRの場合のみ）
  # 注意: reusable-test-reporting.ymlワークフローでは以下の入力が必要です
  # - test_type: テストの種類を指定
  # - junit_path: JUnitレポートのパス（デフォルトは'junit.xml'）
  # - coverage_path: カバレッジレポートのディレクトリパス（デフォルトは'coverage'）
  # - comment_on_pr: PRにコメントするかどうか（デフォルトはfalse）
  # - retention_days: アーティファクト保持日数
  test-report:
    name: テスト結果レポート
    needs: [lint-and-test]
    if: github.event_name == 'pull_request' && always()
    uses: ./.github/workflows/reusable-test-reporting.yml
    with:
      test_type: 'production-ci'
      coverage_path: 'coverage'
      comment_on_pr: true
      retention_days: 7

  # デプロイ承認ステップ（プッシュまたは手動実行時のみ）
  deploy-approval:
    name: デプロイ承認
    needs: [lint-and-test]
    # プッシュまたは手動実行時（承認スキップが指定されていない場合）
    if: (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.skip_approval == 'no'))
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: 承認待機
        run: |
          echo "本番環境へのデプロイが承認されました"
          echo "承認者: ${{ github.actor }}"
          echo "承認日時: $(date)"

  # ステップ3: 本番環境向けデプロイ（プッシュまたは手動実行時のみ）
  # 注意: reusable-deploy.ymlワークフローでは以下のシークレットが必要です
  # - CF_API_TOKEN: Cloudflare API トークン
  # - CF_ACCOUNT_ID: Cloudflare アカウントID
  # - SLACK_WEBHOOK: Slack通知用のWebhook URL（オプション）
  # 本番環境では strict_validation=true で厳格な検証を行います
  deploy-production:
    name: 本番環境デプロイ
    needs: [lint-and-test, deploy-approval]
    # 承認ステップが成功したか、スキップが指定されている場合
    if: always() && ((github.event_name == 'workflow_dispatch' && github.event.inputs.skip_approval == 'yes') || needs.deploy-approval.result == 'success')
    uses: ./.github/workflows/reusable-deploy.yml
    with:
      environment: 'production'
      app_url: 'https://main.automationa-tools.pages.dev/'
      branch_name: 'main'
      next_public_env: 'production'
      strict_validation: true
      send_notification: true
    secrets:
      CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  # デプロイ完了通知（承認スキップ時のみ追加通知）
  notify-emergency-deploy:
    name: 緊急デプロイ通知
    needs: [deploy-production]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.skip_approval == 'yes'
    runs-on: ubuntu-latest
    steps:
      - name: Slack通知
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK || '' }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: 'warning'
          SLACK_TITLE: '⚠️ 承認スキップによる緊急デプロイが実行されました'
          SLACK_MESSAGE: |
            **緊急デプロイ実行**
            環境: 本番
            URL: https://main.automationa-tools.pages.dev/
            実行者: ${{ github.actor }}
            日時: $(date)
            ${{ github.event.inputs.deploy_notes != '' && format('デプロイ注記: {0}', github.event.inputs.deploy_notes) || '注記なし' }}

  # 本番環境マイグレーション自動実行（デプロイ後）
  auto-migrate-production:
    name: 本番環境マイグレーション
    needs: [deploy-production]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v4

      - name: PNPMのセットアップ
        uses: pnpm/action-setup@v2
        with:
          version: 8.10.0

      - name: Node.jsのセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 依存関係のインストール
        run: pnpm install

      # マイグレーション前のバックアップステップ
      - name: データベースバックアップ
        run: pnpm db:backup
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          D1_DATABASE_NAME: ${{ vars.D1_DATABASE_NAME }}
          D1_DATABASE_ID: ${{ secrets.D1_DATABASE_ID }}
          R2_BACKUPS_BUCKET_NAME: ${{ vars.R2_BACKUPS_BUCKET_NAME }}

      # 本番環境マイグレーション実行
      - name: 本番環境マイグレーション実行
        run: pnpm run:prod-migration
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          D1_DATABASE_NAME: ${{ vars.D1_DATABASE_NAME }}
          D1_DATABASE_ID: ${{ secrets.D1_DATABASE_ID }}
          KV_CACHE_ID: ${{ secrets.KV_CACHE_ID }}
          KV_SESSION_STORE_ID: ${{ secrets.KV_SESSION_STORE_ID }}

      # 結果通知ステップ
      - name: マイグレーション結果通知
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK || '' }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
          SLACK_TITLE: 本番環境マイグレーション ${{ job.status == 'success' && '✅ 自動実行成功' || '❌ 自動実行失敗' }}
          SLACK_MESSAGE: |
            環境: production
            データベース: ${{ vars.D1_DATABASE_NAME }}
            ステータス: ${{ job.status }}
            実行者: ${{ github.actor }}（自動実行）
