name: 再利用可能テスト実行

# テスト実行を一元化した再利用可能ワークフロー
# このワークフローは各種テスト（単体、コンポーネント、統合テストなど）の実行を標準化し、
# テスト結果やカバレッジレポートの処理を自動化します
on:
  workflow_call:
    inputs:
      test_type:
        description: 'テストタイプ (unit, component, integration など)'
        required: true
        type: string
      test_command:
        description: '実行するテストコマンド'
        required: true
        type: string
      coverage_command:
        description: 'カバレッジ計測用コマンド（指定しない場合はカバレッジを計測しない）'
        required: false
        type: string
      coverage_threshold:
        description: 'カバレッジ閾値（％）'
        required: false
        default: '70'
        type: string
      junit_path:
        description: 'JUnitレポートのパス'
        required: false
        default: 'junit.xml'
        type: string
      coverage_path:
        description: 'カバレッジレポートのディレクトリパス'
        required: false
        default: 'coverage'
        type: string
      report_to_pr:
        description: 'PRにレポートするかどうか'
        required: false
        default: true
        type: boolean
    # このワークフローが呼び出し元に返す出力値の定義
    # 他のワークフローやジョブでこれらの値を使用可能
    outputs:
      test_success:
        description: 'テスト実行が成功したかどうか'
        value: ${{ jobs.test.outputs.test_success }}
      coverage_success:
        description: 'カバレッジ計測が成功したかどうか'
        value: ${{ jobs.test.outputs.coverage_success }}
      coverage_value:
        description: 'カバレッジ値（%）'
        value: ${{ jobs.test.outputs.coverage_value }}

jobs:
  test:
    name: '${{ inputs.test_type }}テスト実行'
    runs-on: ubuntu-latest
    # テスト実行結果を他のジョブで利用できるように出力
    # ステップのoutcomeやoutputsをジョブレベルの出力として公開
    outputs:
      test_success: ${{ steps.run_test.outcome == 'success' }}
      coverage_success: ${{ steps.run_coverage.outcome == 'success' }}
      coverage_value: ${{ steps.check_coverage.outputs.coverage_value || '0' }}
    steps:
      # ワークフローの基本的なセットアップステップ
      # ソースコードの取得とNode.js/PNPM環境のセットアップ
      - name: ソースコードのチェックアウト
        uses: actions/checkout@v4

      # PNPMのセットアップ（Node.jsパッケージマネージャー）
      # 高速かつディスク効率の良いパッケージ管理
      - name: PNPMのセットアップ
        uses: pnpm/action-setup@v2
        with:
          version: 8.10.0

      # Node.jsのセットアップとPNPMキャッシュの設定
      # キャッシュを有効化して依存関係のインストールを高速化
      - name: Node.jsのセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      # プロジェクト依存関係のインストール
      # テストに必要なすべてのパッケージをインストール
      - name: 依存関係のインストール
        run: pnpm install

      # テスト環境の情報確認と設定ファイルの検証
      # デバッグ用や問題解決のためのトレーサビリティ確保
      - name: テスト環境確認
        run: |
          echo "Node.jsバージョン: $(node -v)"
          echo "PNPMバージョン: $(pnpm -v)"
          echo "テストタイプ: ${{ inputs.test_type }}"

          # テストフレームワーク設定ファイルの存在確認
          if [ -f "vitest.config.ts" ]; then
            echo "vitest.config.ts が見つかりました"
          elif [ -f "jest.config.js" ]; then
            echo "jest.config.js が見つかりました"
          fi

      # テストコマンドの実行
      # エラーが発生しても続行するようにしています（開発段階のため）
      # このステップのoutcomeは後で出力値として使用されます
      - name: テスト実行
        id: run_test
        run: |
          echo "テストコマンドを実行: ${{ inputs.test_command }}"
          ${{ inputs.test_command }} || echo "テスト実行で問題がありましたが続行します"
        env:
          # Node.jsヒープメモリサイズを増加（大規模テスト用）
          NODE_OPTIONS: '--max-old-space-size=4096'
          # ソースディレクトリをモジュール解決パスに追加
          NODE_PATH: 'src'
          # Vitestのログレベル設定
          VITEST_LOG_LEVEL: 'info'

      # カバレッジ計測の実行（指定された場合のみ）
      # coverage_commandが指定されている場合のみ実行
      # このステップのoutcomeは後で出力値として使用されます
      - name: カバレッジ計測
        id: run_coverage
        if: inputs.coverage_command != ''
        run: |
          echo "カバレッジ計測コマンドを実行: ${{ inputs.coverage_command }}"
          ${{ inputs.coverage_command }} || echo "カバレッジ計測で問題がありましたが続行します"
        env:
          # Node.jsのメモリ設定（カバレッジ生成は多くのメモリを使用）
          NODE_OPTIONS: '--max-old-space-size=4096'
          NODE_PATH: 'src'
          VITEST_LOG_LEVEL: 'info'

      # カバレッジ結果の分析と閾値との比較
      # 生成されたJSONレポートからカバレッジ値を抽出し、指定された閾値と比較
      # カバレッジ値はGitHub出力変数として設定され、他のステップやジョブで使用可能
      - name: カバレッジ閾値チェック
        id: check_coverage
        if: inputs.coverage_command != ''
        run: |
          if [ -f ${{ inputs.coverage_path }}/coverage-summary.json ]; then
            # カバレッジレポートから総行カバレッジを抽出
            COVERAGE=$(cat ${{ inputs.coverage_path }}/coverage-summary.json | jq -r '.total.lines.pct')
            echo "総行カバレッジ: $COVERAGE%"
            echo "coverage_value=$COVERAGE" >> $GITHUB_OUTPUT

            # カバレッジ閾値との比較
            if (( $(echo "$COVERAGE < ${{ inputs.coverage_threshold }}" | bc -l) )); then
              echo "⚠️ テストカバレッジが目標値（${{ inputs.coverage_threshold }}%）を下回っています"
              echo "現在のカバレッジ: $COVERAGE%"
              echo "開発段階のため、カバレッジ不足は警告として扱います"
            else
              echo "✅ テストカバレッジが目標値を満たしています"
            fi
          else
            echo "⚠️ カバレッジレポートが見つかりません"
            echo "coverage_value=0" >> $GITHUB_OUTPUT
          fi

  # テスト結果処理ジョブ
  # 他の再利用可能ワークフローを呼び出してレポート生成
  # テスト結果とカバレッジレポートをアーティファクトとして保存し、PRにコメントする
  # 注意: reusable-test-reporting.ymlワークフローでは以下の入力が必要です
  # - test_type: テストの種類を指定
  # - junit_path: JUnitレポートのパス
  # - coverage_path: カバレッジレポートのディレクトリパス
  # - retention_days: アーティファクト保持日数
  # - comment_on_pr: PRにコメントするかどうか
  # - fail_on_empty: ファイルがない場合に失敗するかどうか
  report:
    name: '${{ inputs.test_type }}テスト結果処理'
    needs: [test]
    if: always() # テストが失敗しても常に実行
    uses: ./.github/workflows/reusable-test-reporting.yml
    with:
      test_type: ${{ inputs.test_type }}
      junit_path: ${{ inputs.junit_path }}
      coverage_path: ${{ inputs.coverage_path }}
      retention_days: 7
      comment_on_pr: ${{ inputs.report_to_pr && github.event_name == 'pull_request' }}
      fail_on_empty: false