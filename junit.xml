<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="32" failures="0" errors="0" time="0.779">
    <testsuite name="tests/unit/domain/user/user.service.test.ts" timestamp="2025-04-25T07:40:14.556Z" hostname="ommp2021.local" tests="5" failures="0" errors="0" skipped="0" time="0.005">
        <testcase classname="tests/unit/domain/user/user.service.test.ts" name="UserService &gt; getUserById &gt; 正常にユーザーを取得できる場合" time="0.002">
        </testcase>
        <testcase classname="tests/unit/domain/user/user.service.test.ts" name="UserService &gt; getUserById &gt; ユーザーが見つからない場合はエラーをスローする" time="0.001">
        </testcase>
        <testcase classname="tests/unit/domain/user/user.service.test.ts" name="UserService &gt; getUserById &gt; ユーザーIDなしで検索した場合のエラーメッセージをテスト" time="0">
        </testcase>
        <testcase classname="tests/unit/domain/user/user.service.test.ts" name="UserService &gt; createUser &gt; 正常にユーザーを作成できる場合" time="0">
        </testcase>
        <testcase classname="tests/unit/domain/user/user.service.test.ts" name="UserService &gt; createUser &gt; すでに同じメールアドレスのユーザーが存在する場合はエラーをスローする" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/infrastructure/database/migrations/migration.test.ts" timestamp="2025-04-25T07:40:14.558Z" hostname="ommp2021.local" tests="3" failures="0" errors="0" skipped="0" time="0.004">
        <testcase classname="tests/unit/infrastructure/database/migrations/migration.test.ts" name="Migration Scripts &gt; migrate.js &gt; マイグレーションファイルが見つからない場合はエラーを出力して終了すべき" time="0.002">
        </testcase>
        <testcase classname="tests/unit/infrastructure/database/migrations/migration.test.ts" name="Migration Scripts &gt; migrate.js &gt; マイグレーションファイルが存在する場合は各ファイルを順に実行すべき" time="0.001">
        </testcase>
        <testcase classname="tests/unit/infrastructure/database/migrations/migration.test.ts" name="Migration Scripts &gt; migrate.js &gt; マイグレーション実行中にエラーが発生した場合は処理を終了すべき" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/infrastructure/database/queryBuilders/task-query-builder.test.ts" timestamp="2025-04-25T07:40:14.558Z" hostname="ommp2021.local" tests="4" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/infrastructure/database/queryBuilders/task-query-builder.test.ts" name="TaskQueryBuilder &gt; byUserId &gt; ユーザーIDによるフィルタを正しく構築すべき" time="0.001">
        </testcase>
        <testcase classname="tests/unit/infrastructure/database/queryBuilders/task-query-builder.test.ts" name="TaskQueryBuilder &gt; byStatus &gt; ステータスによるフィルタを正しく構築すべき" time="0.001">
        </testcase>
        <testcase classname="tests/unit/infrastructure/database/queryBuilders/task-query-builder.test.ts" name="TaskQueryBuilder &gt; titleContains &gt; タイトルの部分一致フィルタを正しく構築すべき" time="0">
        </testcase>
        <testcase classname="tests/unit/infrastructure/database/queryBuilders/task-query-builder.test.ts" name="TaskQueryBuilder &gt; byPriorityRange &gt; 優先度範囲フィルタを正しく構築すべき" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/infrastructure/database/repositories/user-repository.test.ts" timestamp="2025-04-25T07:40:14.559Z" hostname="ommp2021.local" tests="10" failures="0" errors="0" skipped="0" time="0.005">
        <testcase classname="tests/unit/infrastructure/database/repositories/user-repository.test.ts" name="UserRepository &gt; findById &gt; 指定したIDのユーザーを返すべき" time="0.001">
        </testcase>
        <testcase classname="tests/unit/infrastructure/database/repositories/user-repository.test.ts" name="UserRepository &gt; findById &gt; ユーザーが見つからない場合はnullを返すべき" time="0">
        </testcase>
        <testcase classname="tests/unit/infrastructure/database/repositories/user-repository.test.ts" name="UserRepository &gt; findByEmail &gt; 指定したメールアドレスのユーザーを返すべき" time="0.001">
        </testcase>
        <testcase classname="tests/unit/infrastructure/database/repositories/user-repository.test.ts" name="UserRepository &gt; createUser &gt; 新しいユーザーを作成して返すべき" time="0">
        </testcase>
        <testcase classname="tests/unit/infrastructure/database/repositories/user-repository.test.ts" name="UserRepository &gt; update &gt; ユーザー情報を更新して返すべき" time="0">
        </testcase>
        <testcase classname="tests/unit/infrastructure/database/repositories/user-repository.test.ts" name="UserRepository &gt; update &gt; 更新対象のユーザーが見つからない場合はnullを返すべき" time="0">
        </testcase>
        <testcase classname="tests/unit/infrastructure/database/repositories/user-repository.test.ts" name="UserRepository &gt; delete &gt; ユーザーを削除して成功を返すべき" time="0">
        </testcase>
        <testcase classname="tests/unit/infrastructure/database/repositories/user-repository.test.ts" name="UserRepository &gt; delete &gt; 削除対象のユーザーが見つからない場合はfalseを返すべき" time="0">
        </testcase>
        <testcase classname="tests/unit/infrastructure/database/repositories/user-repository.test.ts" name="UserRepository &gt; findAll &gt; すべてのユーザーを返すべき" time="0.001">
        </testcase>
        <testcase classname="tests/unit/infrastructure/database/repositories/user-repository.test.ts" name="UserRepository &gt; findAll &gt; ユーザーが存在しない場合は空配列を返すべき" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/infrastructure/database/drizzle/schema.test.ts" timestamp="2025-04-25T07:40:14.559Z" hostname="ommp2021.local" tests="8" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/infrastructure/database/drizzle/schema.test.ts" name="Database Schema &gt; Users Table &gt; 正しいテーブル名を持つべき" time="0">
        </testcase>
        <testcase classname="tests/unit/infrastructure/database/drizzle/schema.test.ts" name="Database Schema &gt; Users Table &gt; 必要なカラムを持つべき" time="0.001">
        </testcase>
        <testcase classname="tests/unit/infrastructure/database/drizzle/schema.test.ts" name="Database Schema &gt; Users Table &gt; idカラムがプライマリーキーであるべき" time="0">
        </testcase>
        <testcase classname="tests/unit/infrastructure/database/drizzle/schema.test.ts" name="Database Schema &gt; Users Table &gt; emailカラムがユニークであるべき" time="0">
        </testcase>
        <testcase classname="tests/unit/infrastructure/database/drizzle/schema.test.ts" name="Database Schema &gt; Tasks Table &gt; 正しいテーブル名を持つべき" time="0">
        </testcase>
        <testcase classname="tests/unit/infrastructure/database/drizzle/schema.test.ts" name="Database Schema &gt; Tasks Table &gt; 必要なカラムを持つべき" time="0.001">
        </testcase>
        <testcase classname="tests/unit/infrastructure/database/drizzle/schema.test.ts" name="Database Schema &gt; Tasks Table &gt; idカラムがプライマリーキーであるべき" time="0">
        </testcase>
        <testcase classname="tests/unit/infrastructure/database/drizzle/schema.test.ts" name="Database Schema &gt; Tasks Table &gt; userIdカラムは外部キー制約を持つべき" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/infrastructure/database/drizzle/task/schema.test.ts" timestamp="2025-04-25T07:40:14.560Z" hostname="ommp2021.local" tests="2" failures="0" errors="0" skipped="2" time="0">
        <testcase classname="tests/unit/infrastructure/database/drizzle/task/schema.test.ts" name="タスクスキーマ &gt; タスクテーブルが存在するべき" time="0">
            <skipped/>
        </testcase>
        <testcase classname="tests/unit/infrastructure/database/drizzle/task/schema.test.ts" name="タスクスキーマ &gt; Task型とNewTask型が定義されているべき" time="0">
            <skipped/>
        </testcase>
    </testsuite>
</testsuites>
